/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * Plutus.Api
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  UseMutationOptions,
  MutationFunction
} from 'react-query'
import type {
  UserResponse,
  AuthenticateQuery
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const authenticate = (
    authenticateQuery: AuthenticateQuery,
 ) => {
      return customInstance<UserResponse>(
      {url: `/api/users/authenticate`, method: 'post',
      data: authenticateQuery
    },
      );
    }
  


    export const useAuthenticate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof authenticate>, TError,{data: AuthenticateQuery}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof authenticate>, {data: AuthenticateQuery}> = (props) => {
          const {data} = props || {};

          return  authenticate(data,)
        }

      return useMutation<AsyncReturnType<typeof authenticate>, TError, {data: AuthenticateQuery}, TContext>(mutationFn, mutationOptions)
    }
    