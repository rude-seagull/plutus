/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * Plutus.Api
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  TransactionResponse,
  CreateTransactionParams
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const getTransactions = (
    accountId: string,
 ) => {
      return customInstance<TransactionResponse[]>(
      {url: `/api/accounts/${accountId}/transactions`, method: 'get'
    },
      );
    }
  

export const getGetTransactionsQueryKey = (accountId: string,) => [`/api/accounts/${accountId}/transactions`];

    
export const useGetTransactions = <TData = AsyncReturnType<typeof getTransactions>, TError = unknown>(
 accountId: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getTransactions>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetTransactionsQueryKey(accountId);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getTransactions>> = () => getTransactions(accountId, );

  const query = useQuery<AsyncReturnType<typeof getTransactions>, TError, TData>(queryKey, queryFn, {enabled: !!(accountId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const createTransaction = (
    accountId: string,
    params?: CreateTransactionParams,
 ) => {
      return customInstance<TransactionResponse>(
      {url: `/api/accounts/${accountId}/transactions`, method: 'post',
        params,
    },
      );
    }
  


    export const useCreateTransaction = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createTransaction>, TError,{accountId: string;params?: CreateTransactionParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof createTransaction>, {accountId: string;params?: CreateTransactionParams}> = (props) => {
          const {accountId,params} = props || {};

          return  createTransaction(accountId,params,)
        }

      return useMutation<AsyncReturnType<typeof createTransaction>, TError, {accountId: string;params?: CreateTransactionParams}, TContext>(mutationFn, mutationOptions)
    }
    