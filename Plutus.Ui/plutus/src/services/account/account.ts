/**
 * Generated by orval v6.5.1 üç∫
 * Do not edit manually.
 * Plutus.Api
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  AccountResponse,
  CreateAccountCommand
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


export const getAccount = (
    accountId: string,
 ) => {
      return customInstance<AccountResponse>(
      {url: `/api/accounts/${accountId}`, method: 'get'
    },
      );
    }
  

export const getGetAccountQueryKey = (accountId: string,) => [`/api/accounts/${accountId}`];

    
export const useGetAccount = <TData = AsyncReturnType<typeof getAccount>, TError = unknown>(
 accountId: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getAccount>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAccountQueryKey(accountId);

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getAccount>> = () => getAccount(accountId, );

  const query = useQuery<AsyncReturnType<typeof getAccount>, TError, TData>(queryKey, queryFn, {enabled: !!(accountId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const getAccounts = (
    
 ) => {
      return customInstance<AccountResponse[]>(
      {url: `/api/accounts`, method: 'get'
    },
      );
    }
  

export const getGetAccountsQueryKey = () => [`/api/accounts`];

    
export const useGetAccounts = <TData = AsyncReturnType<typeof getAccounts>, TError = unknown>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getAccounts>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetAccountsQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getAccounts>> = () => getAccounts();

  const query = useQuery<AsyncReturnType<typeof getAccounts>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

export const createAccount = (
    createAccountCommand: CreateAccountCommand,
 ) => {
      return customInstance<AccountResponse>(
      {url: `/api/accounts`, method: 'post',
      data: createAccountCommand
    },
      );
    }
  


    export const useCreateAccount = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createAccount>, TError,{data: CreateAccountCommand}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      


      const mutationFn: MutationFunction<AsyncReturnType<typeof createAccount>, {data: CreateAccountCommand}> = (props) => {
          const {data} = props || {};

          return  createAccount(data,)
        }

      return useMutation<AsyncReturnType<typeof createAccount>, TError, {data: CreateAccountCommand}, TContext>(mutationFn, mutationOptions)
    }
    