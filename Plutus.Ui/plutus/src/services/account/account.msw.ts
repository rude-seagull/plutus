/**
 * Generated by orval v6.5.1 🍺
 * Do not edit manually.
 * Plutus.Api
 * OpenAPI spec version: v1
 */
import {
  rest
} from 'msw'
import faker from 'faker'

export const getGetAccountMock = () => ({id: faker.random.word(), title: faker.helpers.randomize([faker.random.word(), null]), description: faker.helpers.randomize([faker.random.word(), null]), balance: faker.datatype.number()})

export const getGetAccountsMock = () => ([...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.random.word(), title: faker.helpers.randomize([faker.random.word(), null]), description: faker.helpers.randomize([faker.random.word(), null]), balance: faker.datatype.number()})))

export const getCreateAccountMock = () => ({id: faker.random.word(), title: faker.helpers.randomize([faker.random.word(), null]), description: faker.helpers.randomize([faker.random.word(), null]), balance: faker.datatype.number()})

export const getAccountMSW = () => [
rest.get('*/api/accounts/:accountId', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetAccountMock()),
        )
      }),rest.get('*/api/accounts', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetAccountsMock()),
        )
      }),rest.post('*/api/accounts', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getCreateAccountMock()),
        )
      }),]
